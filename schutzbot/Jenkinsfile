pipeline {
    agent none

    environment {
        AWS_REGION = "us-east-2"
        AWS_BUCKET = "imagebuilder-jenkins-testing-use2"
    }

    options {
        timestamps()
        ansiColor('xterm')
        // Cancel the pipeline if it runs for more than three hours.
        timeout(
            time: 3,
            unit: "HOURS"
        )
    }
    stages {

        stage("Prepare ü§î") {
            agent { label "schutzbot" }
            steps {
                sh (
                    label: "Get environment variables",
                    script: "env | sort"
                )
            }
        }

        stage("Mock build üë∑üèª") {
            // Halt the pipeline immediately if a single mock build fails.
            // A failure to build an RPM is serious and must be
            // investigated.
            failFast true

            parallel {

                stage('F31') {
                    agent { label "f31cloudbase && x86_64" }
                    environment {
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                    }
                    steps {
                        sh "schutzbot/ci_details.sh"
                        retry(3) {
                            sh "schutzbot/mockbuild.sh"
                        }
                        stash (
                            includes: 'osbuild-mock.repo',
                            name: 'fedora31'
                        )
                    }
                }
                stage('F32') {
                    agent { label "f32cloudbase && x86_64" }
                    environment {
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                    }
                    steps {
                        sh "schutzbot/ci_details.sh"
                        retry(3) {
                            sh "schutzbot/mockbuild.sh"
                        }
                        stash (
                            includes: 'osbuild-mock.repo',
                            name: 'fedora32'
                        )
                    }
                }
                stage('EL8') {
                    agent { label "rhel8cloudbase && x86_64" }
                    environment {
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                        RHN_REGISTRATION_SCRIPT = credentials('rhn-register-script-production')
                    }
                    steps {
                        sh "schutzbot/ci_details.sh"
                        retry(3) {
                            sh "schutzbot/mockbuild.sh"
                        }
                        stash (
                            includes: 'osbuild-mock.repo',
                            name: 'rhel8cdn'
                        )
                    }
                }
                stage('EL8.3') {
                    agent { label "rhel83cloudbase && x86_64" }
                    environment {
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                        RHN_REGISTRATION_SCRIPT = credentials('rhn-register-script-production-beta')
                    }
                    steps {
                        sh "schutzbot/ci_details.sh"
                        retry(3) {
                            sh "schutzbot/mockbuild.sh"
                        }
                        stash (
                            includes: 'osbuild-mock.repo',
                            name: 'rhel83'
                        )
                    }
                }
            }
        }

        stage("Testing üçå") {
            parallel {

                stage('F31 Base') {
                    agent { label "f31cloudbase && x86_64" }
                    environment { TEST_TYPE = "base" }
                    steps {
                        unstash 'fedora31'
                        run_base_tests('f31cloudbase', 'fedora-ssh-key')
                    }
                    post {
                        always {
                            preserve_logs('fedora31-base')
                        }
                    }
                }
                stage('F31 Image') {
                    agent { label "f31cloudbase && psi && x86_64" }
                    environment {
                        TEST_TYPE = "image"
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                        AZURE_CREDS = credentials('azure')
                        OPENSTACK_CREDS = credentials("psi-openstack-clouds-yaml")
                    }
                    steps {
                        unstash 'fedora31'
                        run_tests('image')
                    }
                    post {
                        always {
                            preserve_logs('fedora31-image')
                        }
                    }
                }
                stage('F31 Integration') {
                    agent { label "f31cloudbase && x86_64" }
                    environment {
                        TEST_TYPE = "integration"
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                    }
                    steps {
                        unstash 'fedora31'
                        run_tests('integration')
                    }
                    post {
                        always {
                            preserve_logs('fedora31-integration')
                        }
                    }
                }

                stage('F32 Base') {
                    agent { label "f32cloudbase && x86_64" }
                    environment { TEST_TYPE = "base" }
                    steps {
                        unstash 'fedora32'
                        run_base_tests('f32cloudbase', 'fedora-ssh-key')
                    }
                    post {
                        always {
                            preserve_logs('fedora32-base')
                        }
                    }
                }
                stage('F32 Image') {
                    agent { label "f32cloudbase && psi && x86_64" }
                    environment {
                        TEST_TYPE = "image"
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                        AZURE_CREDS = credentials('azure')
                        OPENSTACK_CREDS = credentials("psi-openstack-clouds-yaml")
                    }
                    steps {
                        unstash 'fedora32'
                        run_tests('image')
                    }
                    post {
                        always {
                            preserve_logs('fedora32-image')
                        }
                    }
                }
                stage('F32 Integration') {
                    agent { label "f32cloudbase && x86_64" }
                    environment {
                        TEST_TYPE = "integration"
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                    }
                    steps {
                        unstash 'fedora32'
                        run_tests('integration')
                    }
                    post {
                        always {
                            preserve_logs('fedora32-integration')
                        }
                    }
                }

                stage('EL8 Base') {
                    agent { label "rhel8cloudbase && x86_64" }
                    environment {
                        TEST_TYPE = "base"
                        RHN_REGISTRATION_SCRIPT = credentials('rhn-register-script-production')
                    }
                    steps {
                        unstash 'rhel8cdn'
                        run_base_tests('rhel8cloudbase', 'rhel-ssh-key')
                    }
                    post {
                        always {
                            preserve_logs('rhel8-base')
                        }
                    }
                }
                stage('EL8 Image') {
                    agent { label "rhel8cloudbase && psi && x86_64" }
                    environment {
                        TEST_TYPE = "image"
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                        AZURE_CREDS = credentials('azure')
                        OPENSTACK_CREDS = credentials("psi-openstack-clouds-yaml")
                        RHN_REGISTRATION_SCRIPT = credentials('rhn-register-script-production')
                    }
                    steps {
                        unstash 'rhel8cdn'
                        run_tests('image')
                    }
                    post {
                        always {
                            preserve_logs('rhel8-image')
                        }
                    }
                }
                stage('EL8 Integration') {
                    agent { label "rhel8cloudbase && x86_64" }
                    environment {
                        TEST_TYPE = "integration"
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                        RHN_REGISTRATION_SCRIPT = credentials('rhn-register-script-production')
                    }
                    steps {
                        unstash 'rhel8cdn'
                        run_tests('integration')
                    }
                    post {
                        always {
                            preserve_logs('rhel8-integration')
                        }
                    }
                }

                stage('EL8.3 Base') {
                    agent { label "rhel83cloudbase && x86_64" }
                    environment {
                        TEST_TYPE = "base"
                        RHN_REGISTRATION_SCRIPT = credentials('rhn-register-script-production-beta')
                    }
                    steps {
                        unstash 'rhel83'
                        run_base_tests('rhel83cloudbase', 'rhel-ssh-key')
                    }
                    post {
                        always {
                            preserve_logs('rhel83-base')
                        }
                    }
                }
                stage('EL8.3 Image') {
                    agent { label "rhel83cloudbase && psi && x86_64" }
                    environment {
                        TEST_TYPE = "image"
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                        AZURE_CREDS = credentials('azure')
                        OPENSTACK_CREDS = credentials("psi-openstack-clouds-yaml")
                        RHN_REGISTRATION_SCRIPT = credentials('rhn-register-script-production-beta')
                    }
                    steps {
                        unstash 'rhel83'
                        run_tests('image')
                    }
                    post {
                        always {
                            preserve_logs('rhel83-image')
                        }
                    }
                }
                stage('EL8.3 Integration') {
                    agent { label "rhel83cloudbase && x86_64" }
                    environment {
                        TEST_TYPE = "integration"
                        AWS_CREDS = credentials('aws-credentials-osbuildci')
                        RHN_REGISTRATION_SCRIPT = credentials('rhn-register-script-production-beta')
                    }
                    steps {
                        unstash 'rhel83'
                        run_tests('integration')
                    }
                    post {
                        always {
                            preserve_logs('rhel83-integration')
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            node('schutzbot') {
                script {
                    if (env.BRANCH_NAME == 'master') {
                        telegramSend "üíö CI passed for osbuild-composer master branch ${env.BUILD_URL}"
                    }
                }
            }
        }
        unsuccessful {
            node('schutzbot') {
                script {
                    if (env.BRANCH_NAME == 'master') {
                        telegramSend "üí£ CI failed for osbuild-composer master branch ${env.BUILD_URL}"
                    }
                }
            }
        }
    }

}

void run_base_tests(template, credentials) {
    // Get CI machine details.
    sh (
        label: "Get CI machine details",
        script: "schutzbot/ci_details.sh"
    )

    setup_remote_osbuild_composer("${template}", "${credentials}")

    // Install -tests RPM package
    sh (
        label: "Deploy",
        script: "schutzbot/deploy.sh tests"
    )

    // Run the tests
    sh (
        label: "Base tests",
        script: "schutzbot/run_base_tests.sh"
    )
}

// Set up a function to hold the steps needed to run the tests so we don't
// need to copy/paste the same lines over and over above.
void run_tests(test_type) {

    // Get CI machine details.
    sh (
        label: "Get CI machine details",
        script: "schutzbot/ci_details.sh"
    )

    // Deploy the Image Builder packages and services.
    sh (
        label: "Deploy",
        script: "schutzbot/deploy.sh"
    )

    // Run the base tests.
    if (test_type == 'base') {
        sh (
            label: "Base tests",
            script: "schutzbot/run_base_tests.sh"
        )
    }

    if (test_type == 'image') {
        sh (
            label: "Image tests",
            script: "schutzbot/run_image_tests.sh"
        )
    }

    if (test_type == 'integration') {
        // Run the qcow2 test.
        sh (
            label: "Integration test: QCOW2",
            script: "test/image-tests/qemu.sh qcow2"
        )

        // Run the openstack test.
        sh (
            label: "Integration test: OpenStack",
            script: "test/image-tests/qemu.sh openstack"
        )

        // Run the VHD/Azure test.
        sh (
            label: "Integration test: VHD",
            script: "test/image-tests/qemu.sh vhd"
        )

        // Run the VMDK/VMware test.
        sh (
            label: "Integration test: VMDK",
            script: "test/image-tests/qemu.sh vmdk"
        )

        // Run the AWS test.
        sh (
            label: "Integration test: AWS",
            script: "test/image-tests/aws.sh"
        )
    }

}

// Move logs to a unique location and tell Jenkins to capture them on success
// or failure.
void preserve_logs(test_slug) {

    // Save the systemd journal.
    sh "journalctl --boot > systemd-journald.log"

    // Make a directory for the log files and move the logs there.
    sh "mkdir ${test_slug} && mv *.log *.jpg ${test_slug}/ || true"

    // Artifact the logs.
    archiveArtifacts (
        allowEmptyArchive: true,
        artifacts: "${test_slug}/*.log,${test_slug}/*.jpg"
    )

}

void setup_remote_osbuild_composer(template, credentials) {
    // Embed imperative Jenkinsfile format into this declarative one
    script {
        // Run independent OpenStack VM
        vm = openstackMachine cloud: 'PSI OpenStack', template: "${template}"
        echo "Deploying target machine on IP address: ${vm.address}"
        // Wait for it to become online
        timeout(5) {
            waitUntil {
                def rc = sh (
                    label: "Trying to reach the target VM",
                    returnStatus: true,
                    script: "ping -qc 5 ${vm.address}"
                )
                echo "Ping result: $rc"
                return rc == 0
            }
        }
        def sshOpts = "-oConnectTimeout=15 -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null"
        withCredentials([sshUserPrivateKey(credentialsId: "${credentials}", keyFileVariable: 'keyFile', usernameVariable: 'username')]) {
            // Make sure SSH works
            timeout(5) {
                waitUntil {
                    sleep(10)
                    def rc = sh (
                        label: "Trying to make sure SSH works",
                        returnStatus: true,
                        script: "ssh $sshOpts -i ${keyFile} ${username}@${vm.address} 'cat /etc/os-release'"
                    )
                    echo "SSH result: $rc"
                    return rc == 0
                }
            }
            // Install and run osbuild-composer inside the VM
            // TODO: copy environment variables needed for RHEL setup
            sh (
                // The target VM does not contain the git checkout which is available in the test VM
                // but we still need few files there
                label: "Prepare directories",
                script:  "ssh $sshOpts -i ${keyFile} ${username}@${vm.address} 'mkdir /tmp/schutzbot /tmp/test/external-repos/'"
            )
            sh (
                label: "Copy repo file to the target VM",
                script: "scp $sshOpts -i ${keyFile} osbuild-mock.repo ${username}@${vm.address}:/tmp/"
            )
            sh (
                label: "Copy deployment configuration to the target VM",
                script: "scp $sshOpts -i ${keyFile} schutzbot/team_ssh_keys.txt schutzbot/deploy.sh ${username}@${vm.address}:/tmp/schutzbot/"
            )
            sh (
                label: "Copy RHEL repository configuration to the target VM",
                script: "scp $sshOpts -i ${keyFile} test/external-repos/rhel-8.json ${username}@${vm.address}:/tmp/test/external-repos/"
            )
            sh (
                label: "Run configuration of the target VM",
                script:  "ssh $sshOpts -i ${keyFile} ${username}@${vm.address} 'bash /tmp/deploy.sh composer'"
            )
            sh (
                label: "Prepare Weldr API socket for forwarding (allow the Jenkins user to read/write from/to it)",
                script:  "ssh $sshOpts -i ${keyFile} ${username}@${vm.address} 'sudo chmod go+rw /run/weldr/api.socket'"
            )
            sh (
                label: "Prepare local /run/weldr directory for the forwarded socket",
                script:  "sudo mkdir /run/weldr"
            )
            sh (
                label: "Forward the Weldr API socket from the target VM to the test VM",
                script:  "sudo ssh $sshOpts -i ${keyFile} -fN -L /run/weldr/api.socket:/run/weldr/api.socket ${username}@${vm.address}"
            )
        }
    }
}
